from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from langchain.text_splitter import CharacterTextSplitter
from langchain_gigachat.chat_models import GigaChat

from langchain.document_loaders import PyPDFLoader
import os

llm_model = GigaChat(
    base_url='http://liveaccess/v1/gc',
    access_token="18880c81-bbb1-449e-a277-40edecf6ea38",
        model='GigaChat-2-Max',
        verbose=False,
        temperature=0.1)

system_prompt = "–¢—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–æ–º–æ—à–Ω–∏–∫"
agent = create_react_agent(
    model=llm_model,
    tools=[],

    prompt=system_prompt,  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    checkpointer=MemorySaver()  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ LangGraph –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
)

query = '–ö–∞–∫–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞? –û–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã.'
config = {"configurable": {"thread_id": "main"}}

response = agent.invoke({"messages": [("user", query.encode('utf-8', errors='replace').decode('utf-8'))]},
                        config=config)
print("ü§ñ :", response["messages"][-1].content)